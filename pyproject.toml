# These are the assumed default build requirements from pip:
# https://pip.pypa.io/en/stable/reference/pip/#pep-517-and-518-support

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]

# This is the name of your project. The first time you publish this
#package, this name will registered for you. It will determine how 
#users can install this project.
# example: pip install valid_v1
# You can search for your project on PyPI : https://pypi.org/project/
# Can check a valid project name here : https://packaging.python.org/specifications/core-metadata/#name


name = "valid_v1" # Required

# This should be your name or the name of the organization who originally authored the project, and a valid email address 
# corresponding to the same listed.

authors = [
    { name = "Jignesh Shah", email = "j.shah@uu.nl"},
]


# This should be your name or the names of the organization who currently maintains the project, and a valid email address 
# corresponding to the name listed

maintainers = [
    { name = "Jignesh Shah", email = "j.shah@uu.nl"},
]

# This is a one-line description or tagline of what your project does. This corresponads to the "Summary" metadata field:
# https://packaging.python.org/en/latest/specifications/core-metadata/#summary

description = "A python package to validate observed data with model data." #optional

# This is an optional longer description of your project that represents the body of text which users will seen when they visit PyPI.
# Often, this the same as your README, so you can just read it in from that file directly,
# This field corresponds to the "Description" metadata field:
# https://packaging.python.org/specifications/core-metadata/#description-optional

readme = "README.md" #optional

# Specify which Python versions you support. In contrast to the 'Programming Language' classifiers below, 'pip install' will check this 
# and refuse to install the project if the version does not match. See https://packaging.python.org/specifications/core-metadata/#description-optional

requires-python = ">=3.7"


license = { file = "LICENSE" }


# Classifiers help users find your project by categorizing it.
# For a list of valid classifiers, see https://pypi.org/classifiers/

classifiers = [
    # dependent on any operating system
    'Operating System :: OS Independent',

    # Pick your license as you wish
    'License :: OSI Approved :: MIT License',

    # Specify the Python versions you support here. In particular, ensure 
    # that you indicate you support Python 3. These classifiers are *not* 
    # checked by "pip install". See instead "python_requires" below.
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',

    # How mature is the project? Comman values are
    # 3 - Alpha
    # 4 - Beta
    # 5 - Production/Stable
    'Development Status :: 1-Planning
]

#This field lists other packages that your project depends on to run. Any package you put here will be installed by pip when your project is installed, 
# so they must be valid existing projects.
# For an analysis of this field vs pip requirement files see: 
# https://packaging.python.org/discussions/install-requires-vs-requirements/

dependencies = [
    "matplotlib>=3.6.2",
    "pandas>=2.0.0",
    "xarray>=2022.12.0"
]


# Here version will be dynamic
dynamic = ["version"]

# List URLs that are relevant for your project
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://github.com/pypa/sampleproject/blob/main/pyproject.toml
#  https://packaging.python.org/specifications/core-metadata/#home-page-optional
# Examples listed include a pattern for specifying where the package tracks issues, where source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is what is used to render the link text on PyPI.

[project.urls]
Repository = "https://github.com/Jignesh1594/GRDCvalidation_PCRGLOWB"


[project.scripts]
valid_v1 = ""


[project.optional-dependencies]
dev = [
    "build",
    "pre-commit",
    "ruff",
    "twine",
]


# This is configuration specific to the `setuptools` build backend. If you are using a different build backend, you will need to change this.

[tool.setuptools]
packages = ["valid_v1"]

[tool.setuptools.dynamic]
version = { attr = "valid_v1.__version__" }

[tool.ruff]
target-version = "py38"
line-length = 120
select = [
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "E",    # pycodestyle
    "F",    # pyflakes
    "I",    # isort
    "PGH",  # pygrep-hooks
    "RUF",  # ruff
    "UP",   # pyupgrade
    "W",    # pycodestyle
    "YTT",  # flake8-2020
]
ignore = [
    "B006",   # mutable-argument-default
    "B007",   # unused-loop-control-variable
    "B018",   # useless-expression
    "RUF012", # mutable-class-default
]

[tool.ruff.isort]
known-first-party = [
    "valid_v1"
]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.isort.sections]
isimip_utils = ["isimip_utils"]